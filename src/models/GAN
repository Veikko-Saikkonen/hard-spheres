import mlflow.experiments
import torch
from torch import nn
from torch.utils.data import DataLoader
from datetime import datetime
from tqdm import tqdm
import mlflow
from matplotlib import pyplot as plt
import lightning as L
import psutil
import numpy as np

import os

from src.plotting import plot_pointcloud, plot_sample_figures
from src.utils import build_optimizer_fn_from_config, build_run_name
from src.utils import log_nested_dict
from src.models.losses import build_loss_fn


class CryinGAN(nn.Module):

    def __init__(self, generator, discriminator, config):
        super(CryinGAN, self).__init__()
        self.generator = generator
        self.discriminator = discriminator
        self.config = config

    def forward(self, x):
        return self.generator(x)

    def generate(self, n_samples):
        z = torch.randn(n_samples, self.config["latent_dim"]).to(self.config["device"])
        return self.generator(z)

    def save(self, path):
        torch.save(self.state_dict(), path)

    def load(self, path):
        self.load_state_dict(torch.load(path))
